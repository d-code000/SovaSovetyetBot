import keyboard

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.markdown import hbold
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

router = Router()
router.message.filter(F.chat.type == "private")


class Question(StatesGroup):
    consent_to_publication = State()
    consent_to_publicity = State()
    ask_question = State()


@router.message(Command("start"))
async def command_start_handler(message: Message) -> None:
    await message.answer(text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {hbold(message.from_user.full_name)}! –†–∞–¥, —á—Ç–æ –í—ã –Ω–∞—à–ª–∏ –≤—Ä–µ–º—è –Ω–∞ —Ç–æ,"
                              f" —á—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ. –ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ /new."
                         )


@router.message(Command("new"))
async def consent_to_publication(message: Message, state: FSMContext) -> None:
    await state.set_state(Question.consent_to_publication)
    await message.answer(text="–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –í—ã –∑–∞–¥–∞–¥–∏—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –º–Ω–µ –Ω—É–∂–Ω–æ –í–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–∞"
                              " –≤ –Ω–∞—à –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ —Ä–∞–∑–±–æ—Ä–∞ (–º–æ–∂–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ üîí).",
                         reply_markup=keyboard.inline_menu_approval
                         )


@router.callback_query(Question.consent_to_publication,
                       F.data == "disagree")
async def disagree_message(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(text="–ò–∑–≤–∏–Ω–∏—Ç–µ üò¢, –Ω–æ –±–µ–∑ –í–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è —è –Ω–µ –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å –≤–æ–ø—Ä–æ—Å,"
                                       " —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ."
                                       " –ï—Å–ª–∏ –í—ã –≤—Å—ë-—Ç–∞–∫–∏ —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–º–æ–∂–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ üîí)"
                                       " - –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ /new"
                                  )


@router.callback_query(Question.consent_to_publication,
                       F.data == "agree")
async def consent_to_publicity(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Question.consent_to_publicity)
    await callback.message.delete()
    await callback.message.answer(text="–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: —Ö–æ—Ç–µ–ª–∏ –±—ã –≤—ã –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∏–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç—å?",
                                  reply_markup=keyboard.inline_menu_publicity
                                  )


@router.callback_query(Question.consent_to_publicity,
                       F.data.in_({"publicly", "anonymous"})
                       )
async def ask_question(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Question.ask_question)
    await state.update_data(id=callback.from_user.id, status=callback.data)
    await callback.message.delete()
    await callback.message.answer(text="–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–≤–∞–π—Ç–µ <b>–í–∞—à –≤–æ–ø—Ä–æ—Å</b>. "
                                       "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏–º, –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—é–¥–∞ <b>—Å—Å—ã–ª–∫—É</b> –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é"
                                       " —Å —Ä–∞–∑–±–æ—Ä–æ–º –í–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
                                  )


@router.message(Question.ask_question,
                F.text,
                F.text.len() <= 2000,
                F.text.len() >= 20
                )
async def farewell_message(message: Message, state: FSMContext) -> None:
    await state.update_data(question=message.text)
    user_data = await state.get_data()
    await state.clear()
    await message.answer(text="–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–∞—à <b>—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç</b> –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                              " –∏ —Ä–∞–∑–±–µ—Ä—ë—Ç –í–∞—à —Å–ª—É—á–∞–π. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ <b>24 —á–∞—Å–æ–≤</b>.\n\n"
                              " –ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è –∏ —Å–≤–æ–∏—Ö –±–ª–∏–∑–∫–∏—Ö. –í–∞—à–∞ –°–æ–≤–∞ ‚ù§Ô∏è"
                         )


@router.message(Question.ask_question)
async def question_not_text_message(message: Message) -> None:
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª–∏–Ω–Ω–æ–π –æ—Ç 20 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤!")


@router.message(F.text)
async def no_command_handler(message: Message) -> None:
    await message.answer(text="–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new")
